generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

model User {
  id Int @id @default(autoincrement())

  firstName    String
  lastName     String
  companies    Company[]
  Notification Notification[]
  phone        String         @unique
  email        String         @unique
  imageUrl     String?
  isVerified   Boolean        @default(false)
  twoFA        Boolean        @default(false)
  token        String         @unique
  password     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id Int @id @default(autoincrement())

  name       String
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  phone      String     @unique
  address    String
  taxCode    String     @unique
  imageUrl   String?
  plan       Plan       @default(FREE)
  categories Category[]
  employees  Employee[]
  tables     Table[]
  places     Place[]
  bills      Bill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Category {
  id Int @id @default(autoincrement())

  name        String
  description String?
  imageUrl    String?
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   Int
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model Product {
  id Int @id @default(autoincrement())

  name         String
  description  String?
  price        Float
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryName String
  categoryId   Int
  imageUrl     String?
  orders       Order[]
  bills        Bill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Employee {
  id Int @id @default(autoincrement())

  firstName String
  lastName  String
  username  String
  phone     String
  password  String
  imageUrl  String?
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([roleId])
}

model Table {
  id Int @id @default(autoincrement())

  name        String
  description String?
  isAvailable Boolean @default(true)
  isReserved  Boolean @default(false)
  orders      Order[]
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  bills       Bill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId   Int

  @@index([companyId])
  @@index([placeId])
}

model Place {
  id Int @id @default(autoincrement())

  name      String
  tables    Table[]
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model Order {
  id Int @id @default(autoincrement())

  orderItems Product[]
  total      Float
  table      Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tableId])
}

model Bill {
  id Int @id @default(autoincrement())

  total     Float
  items     Product[]
  table     Table     @relation(fields: [tableId], references: [id])
  tableId   Int
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([tableId])
}

model Role {
  id Int @id @default(autoincrement())

  name        String
  description String
  employees   Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id Int @id @default(autoincrement())

  title   String
  content String
  read    Boolean @default(false)
  link    String
  user    User    @relation(fields: [userId], references: [id])
  userId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
